{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Project Title: Managing a DevSecOps Pipeline with Secure Development and Operations Author: Tariq Ahmed Mentor: Akash Mahajan , Sunesh Govindaraj , Ayush Priya , Priyam Singh This report was created as part of my internship at Kloudle as a DevSecOps Engineer. The report documents the tasks I worked on as part of my internship as well as the solutions I created for them along with various notes on issues I faced and their rectification measures.","title":"Introduction"},{"location":"contents/","text":"The following is the report/documentation for the problem statements stated in the next section. The contents of the report are: Introduction Table of Content Setup of VMs Setup of Jenkins Setup of Production Server SSH Connection between VMs Static Analysis Dynamic Analysis Software Bill of Materials Resources","title":"Table of Content"},{"location":"dynamic_analysis/","text":"Objective The aim of this section is to perform dynamic analysis using DAST tools on DVNA. About DAST Dynamic Application Security Testing (DAST) is a testing methodology which looks for security vulnerabilities by simulating external attacks on an application while the application is running. DAST performs black-box security testing. OWASP ZAP The Zed Attack Proxy (ZAP) is one of the most widely-used open source tools for DAST. It helps find security vulnerabilities in web applications while its in the development and testing stage. Maintained by OWASP, ZAP has built a huge community of people creating new features and add-ons that make it incredibly versatile. Implementing ZAP analysis with docker is simpler and faster than manual installation. I followed this documentation . First, pull the ZAP image from docker hub. sudo docker pull owasp/zap2docker-stable We will be running a baseline scan as it is ideal in a CI/CD environment, even against production sites. Docker flags used --rm, remove container after completion -d, run as a background job -u , specify user to run container as -v 'host dir':'container dir', mount volumes Zap CLI flags used -t 'target', specify target to scan -r 'file.html', generate an HTML output report -l level, minimum level to show: PASS, IGNORE, INFO, WARN or FAIL. sudo docker run --rm -d -u zap --name owasp-zap -v ~/:/zap/wrk/ owasp/zap2docker-stable zap-baseline.py -t http://192.168.56.102:9090 -r owasp-zap-report.html -l PASS To run a fullscan script, run the following command sudo docker run --rm -d -u zap --name owasp-zap -v ~/:/zap/wrk/ owasp/zap2docker-stable zap-full-scan.py -t http://192.168.56.102:9090 -r owasp-zap-report.html -l PASS The report owasp-zap-report.html , generated on successful completion, will be located in the users home directory. Note: To open .html file in browser from terminal, type open owasp-report.html from host terminal. DAST Pipeline As we've already seen in Setup of Production Server , DVNA is deployed in a docker container. To perform DAST on DVNA, the application will run in a docker container and the DAST tool will run in another container (as shown earlier in this section). To work with docker containers via Jenkins pipeline, you'll need to add jenkins user to group docker to run docker commands without sudo. sudo usermod -aG docker jenkins sudo reboot The entire pipeline for both SAST and DAST is given below. pipeline { agent any stages { stage ('Initialization') { steps { sh 'echo \"Starting the build!\"' } } stage('Copy Application Code') { steps { sh 'ssh -o StrictHostKeyChecking=no tariq@192.168.56.102 \"docker start dvna-mysql && docker start dvna-app; docker cp dvna-app:/app/ ~/;\"' sh 'scp -rC tariq@192.168.56.102:~/app ~/ && mkdir ~/report && chmod 777 ~/report' } } stage('NodeJsScan') { steps { sh 'njsscan --json -o ~/report/nodejsscan-report ~/app || true' } } stage('Auditjs') { steps { sh 'cd ~/app; auditjs ossi > ~/report/auditjs-report || true' } } stage ('OWASP Dependency-Check') { steps { sh '~/dependency-check/bin/dependency-check.sh --scan ~/app --out ~/report/dependency-check-report --format JSON --prettyPrint || true' } } stage('ZAP Scan') { steps { sh 'docker run --rm -i -u zap --name owasp-zap -v ~/report/:/zap/wrk/ owasp/zap2docker-stable zap-baseline.py -t http://192.168.56.102:9090 -r zap-report.html -l PASS || true' } } stage ('Final') { steps { sh 'ssh -o StrictHostKeyChecking=no tariq@192.168.56.102 \"docker stop dvna-app && docker stop dvna-mysql;\"' sh 'rm -rf ~/app' sh 'echo \"Scan successfully completed!\"' } } } } Increase VM Disk Space (Optional) While trying to run the Jenkins pipeline, I noticed there was an error during the ZAP scan. On reviewing the container logs, I realized that my VM was out of disk space. So instead of creating a new VM with more disk space (I was currently using the default 10GB), I decided to increase the disk space of the Jenkins VM to 16GB. I followed this documentation . Get location of your Jenkins VM virtual hard disk. Go to Oracle VM VirtualBox Manager -> Jenkins Server -> Settings -> Storage -> Controller: IDE . Increase Disk Size To increase size of virtual disk, type the following command in the terminal (for Linux/MaxOS). VBoxManage modifyhd --resize <NEW-SIZE> <LOCATION-OF-VDI-IMAGE> Check if size changed successfully. VBoxManage showhdinfo <LOCATION-OF-VDI-IMAGE> | grep Capacity Boot from GParted on your VM I followed the same steps as mentioned in the Boot from GParted on your VM section of the documentation . Even after having followed all the steps, the partition was still not set properly. I found the solution to this problem here . In the Jenkins VM, resize the logical volume to use all the existing and free space of the volume group. sudo lvm lvm> lvextend -l +100%FREE /dev/ubuntu-vg/ubuntu-lv lvm> exit After the command above is successful, resize the file system to use the new available space in the logical volume. sudo resize2fs /dev/ubuntu-vg/ubuntu-lv Check if the available space has increased. df -h Note While running the ZAP scan in pipeline, I got the following error: ERROR [Errno 13] Permission denied: '/zap/wrk/zap-report.html' To resolve this error, I changed the permissions of /var/lib/jenkins/report directory. sudo chmod 777 /var/lib/jenkins/report","title":"Dynamic Analysis"},{"location":"dynamic_analysis/#objective","text":"The aim of this section is to perform dynamic analysis using DAST tools on DVNA. About DAST Dynamic Application Security Testing (DAST) is a testing methodology which looks for security vulnerabilities by simulating external attacks on an application while the application is running. DAST performs black-box security testing.","title":"Objective"},{"location":"dynamic_analysis/#owasp-zap","text":"The Zed Attack Proxy (ZAP) is one of the most widely-used open source tools for DAST. It helps find security vulnerabilities in web applications while its in the development and testing stage. Maintained by OWASP, ZAP has built a huge community of people creating new features and add-ons that make it incredibly versatile. Implementing ZAP analysis with docker is simpler and faster than manual installation. I followed this documentation . First, pull the ZAP image from docker hub. sudo docker pull owasp/zap2docker-stable We will be running a baseline scan as it is ideal in a CI/CD environment, even against production sites. Docker flags used --rm, remove container after completion -d, run as a background job -u , specify user to run container as -v 'host dir':'container dir', mount volumes Zap CLI flags used -t 'target', specify target to scan -r 'file.html', generate an HTML output report -l level, minimum level to show: PASS, IGNORE, INFO, WARN or FAIL. sudo docker run --rm -d -u zap --name owasp-zap -v ~/:/zap/wrk/ owasp/zap2docker-stable zap-baseline.py -t http://192.168.56.102:9090 -r owasp-zap-report.html -l PASS To run a fullscan script, run the following command sudo docker run --rm -d -u zap --name owasp-zap -v ~/:/zap/wrk/ owasp/zap2docker-stable zap-full-scan.py -t http://192.168.56.102:9090 -r owasp-zap-report.html -l PASS The report owasp-zap-report.html , generated on successful completion, will be located in the users home directory. Note: To open .html file in browser from terminal, type open owasp-report.html from host terminal.","title":"OWASP ZAP"},{"location":"dynamic_analysis/#dast-pipeline","text":"As we've already seen in Setup of Production Server , DVNA is deployed in a docker container. To perform DAST on DVNA, the application will run in a docker container and the DAST tool will run in another container (as shown earlier in this section). To work with docker containers via Jenkins pipeline, you'll need to add jenkins user to group docker to run docker commands without sudo. sudo usermod -aG docker jenkins sudo reboot The entire pipeline for both SAST and DAST is given below. pipeline { agent any stages { stage ('Initialization') { steps { sh 'echo \"Starting the build!\"' } } stage('Copy Application Code') { steps { sh 'ssh -o StrictHostKeyChecking=no tariq@192.168.56.102 \"docker start dvna-mysql && docker start dvna-app; docker cp dvna-app:/app/ ~/;\"' sh 'scp -rC tariq@192.168.56.102:~/app ~/ && mkdir ~/report && chmod 777 ~/report' } } stage('NodeJsScan') { steps { sh 'njsscan --json -o ~/report/nodejsscan-report ~/app || true' } } stage('Auditjs') { steps { sh 'cd ~/app; auditjs ossi > ~/report/auditjs-report || true' } } stage ('OWASP Dependency-Check') { steps { sh '~/dependency-check/bin/dependency-check.sh --scan ~/app --out ~/report/dependency-check-report --format JSON --prettyPrint || true' } } stage('ZAP Scan') { steps { sh 'docker run --rm -i -u zap --name owasp-zap -v ~/report/:/zap/wrk/ owasp/zap2docker-stable zap-baseline.py -t http://192.168.56.102:9090 -r zap-report.html -l PASS || true' } } stage ('Final') { steps { sh 'ssh -o StrictHostKeyChecking=no tariq@192.168.56.102 \"docker stop dvna-app && docker stop dvna-mysql;\"' sh 'rm -rf ~/app' sh 'echo \"Scan successfully completed!\"' } } } }","title":"DAST Pipeline"},{"location":"dynamic_analysis/#increase-vm-disk-space-optional","text":"While trying to run the Jenkins pipeline, I noticed there was an error during the ZAP scan. On reviewing the container logs, I realized that my VM was out of disk space. So instead of creating a new VM with more disk space (I was currently using the default 10GB), I decided to increase the disk space of the Jenkins VM to 16GB. I followed this documentation . Get location of your Jenkins VM virtual hard disk. Go to Oracle VM VirtualBox Manager -> Jenkins Server -> Settings -> Storage -> Controller: IDE . Increase Disk Size To increase size of virtual disk, type the following command in the terminal (for Linux/MaxOS). VBoxManage modifyhd --resize <NEW-SIZE> <LOCATION-OF-VDI-IMAGE> Check if size changed successfully. VBoxManage showhdinfo <LOCATION-OF-VDI-IMAGE> | grep Capacity Boot from GParted on your VM I followed the same steps as mentioned in the Boot from GParted on your VM section of the documentation . Even after having followed all the steps, the partition was still not set properly. I found the solution to this problem here . In the Jenkins VM, resize the logical volume to use all the existing and free space of the volume group. sudo lvm lvm> lvextend -l +100%FREE /dev/ubuntu-vg/ubuntu-lv lvm> exit After the command above is successful, resize the file system to use the new available space in the logical volume. sudo resize2fs /dev/ubuntu-vg/ubuntu-lv Check if the available space has increased. df -h Note While running the ZAP scan in pipeline, I got the following error: ERROR [Errno 13] Permission denied: '/zap/wrk/zap-report.html' To resolve this error, I changed the permissions of /var/lib/jenkins/report directory. sudo chmod 777 /var/lib/jenkins/report","title":"Increase VM Disk Space (Optional)"},{"location":"jenkins_setup/","text":"Objective The aim of this section is to set up a Jenkins server for building various CI/CD pipelines. About Jenkins Jenkins is a Java-based open-source automation software. It automates the repetitive technical tasks involved in the continuous integration and delivery of software Prerequisites VM running Ubuntu 18.04 LTS. Java version 8. OpenJDK version 11. Step 1 - Install Java The easiest option for installing Java is to use the version packaged with Ubuntu. By default, Ubuntu 18.04 includes OpenJDK version 11, which is an open-source variant of the JRE and JDK. Install the default Java Runtime Environment (JRE) from OpenJDK 11. $ sudo apt install default-jre $ java --version # OpenJDK version Next, install Java Development Kit (JDK) in order to compile and run some specific Java-based software $ sudo apt install default-jdk $ javac --version # Java Compiler version Step 2 - Install Jenkins First, add the repository key to the system. On success, the system will return \"OK\". wget -q -O - <https://pkg.jenkins.io/debian-stable/jenkins.io.key> | sudo apt-key add - Next, append the Debian package repository address to the server\u2019s sources.list file. sudo sh -c 'echo deb <http://pkg.jenkins.io/debian-stable> binary/ > /etc/apt/sources.list.d/jenkins.list' sudo apt update Install Jenkins and its dependencies sudo apt install jenkins Step 3 - Start Jenkins Service After all the installation steps, start Jenkins using systemctl. You can view the status of the service, using the 2nd command shown below. sudo systemctl start jenkins sudo systemctl status jenkins Step 4 - Adding Firewall Rules Jenkins uses port 8080 by default. Hence, we'll allow traffic to port 8080 by adding a firewall rule using ufw (uncomplicated firewall). sudo ufw allow 8080 sudo ufw allow OpenSSH # Allow SSH access into the server over the internet sudo ufw enable # Starts the firewall service sudo ufw status # Shows all firewall rules Step 5 - Setting Up Jenkins To set up your installation, visit Jenkins on its default port, 8080, using your server domain name or IP address: http:// :8080. The 'Unlock Jenkins' page asks for administrator password. This password is present in the /var/lib/jenkins/secrets/initialAdminPassword file. Copy and paste the admin password from that file. sudo cat /var/lib/jenkins/secrets/initialAdminPassword You will be given a choice to install suggested plugins or select your own plugins (I chose to install the suggested plugins). After the installation of plugins is complete, you will be prompted to create admin user. You can either create your own, or continue with the default admin. You will see an 'Instance Configuration' page that will ask you to confirm the preferred URL for your Jenkins instance. After confirming the appropriate information, click Save and Finish. You will see a confirmation page confirming that \u201cJenkins is Ready!\u201d Note: If you had moved forward with the default admin and not created a custom admin user, when logging in, username=\"admin\" and password=\" initialAdminPassword file>\". You can change the admin password from Dashboard \u2192 Admin \u2192 Configure","title":"Setup of Jenkins"},{"location":"jenkins_setup/#objective","text":"The aim of this section is to set up a Jenkins server for building various CI/CD pipelines. About Jenkins Jenkins is a Java-based open-source automation software. It automates the repetitive technical tasks involved in the continuous integration and delivery of software Prerequisites VM running Ubuntu 18.04 LTS. Java version 8. OpenJDK version 11.","title":"Objective"},{"location":"jenkins_setup/#step-1-install-java","text":"The easiest option for installing Java is to use the version packaged with Ubuntu. By default, Ubuntu 18.04 includes OpenJDK version 11, which is an open-source variant of the JRE and JDK. Install the default Java Runtime Environment (JRE) from OpenJDK 11. $ sudo apt install default-jre $ java --version # OpenJDK version Next, install Java Development Kit (JDK) in order to compile and run some specific Java-based software $ sudo apt install default-jdk $ javac --version # Java Compiler version","title":"Step 1 - Install Java"},{"location":"jenkins_setup/#step-2-install-jenkins","text":"First, add the repository key to the system. On success, the system will return \"OK\". wget -q -O - <https://pkg.jenkins.io/debian-stable/jenkins.io.key> | sudo apt-key add - Next, append the Debian package repository address to the server\u2019s sources.list file. sudo sh -c 'echo deb <http://pkg.jenkins.io/debian-stable> binary/ > /etc/apt/sources.list.d/jenkins.list' sudo apt update Install Jenkins and its dependencies sudo apt install jenkins","title":"Step 2 - Install Jenkins"},{"location":"jenkins_setup/#step-3-start-jenkins-service","text":"After all the installation steps, start Jenkins using systemctl. You can view the status of the service, using the 2nd command shown below. sudo systemctl start jenkins sudo systemctl status jenkins","title":"Step 3 - Start Jenkins Service"},{"location":"jenkins_setup/#step-4-adding-firewall-rules","text":"Jenkins uses port 8080 by default. Hence, we'll allow traffic to port 8080 by adding a firewall rule using ufw (uncomplicated firewall). sudo ufw allow 8080 sudo ufw allow OpenSSH # Allow SSH access into the server over the internet sudo ufw enable # Starts the firewall service sudo ufw status # Shows all firewall rules","title":"Step 4 - Adding Firewall Rules"},{"location":"jenkins_setup/#step-5-setting-up-jenkins","text":"To set up your installation, visit Jenkins on its default port, 8080, using your server domain name or IP address: http:// :8080. The 'Unlock Jenkins' page asks for administrator password. This password is present in the /var/lib/jenkins/secrets/initialAdminPassword file. Copy and paste the admin password from that file. sudo cat /var/lib/jenkins/secrets/initialAdminPassword You will be given a choice to install suggested plugins or select your own plugins (I chose to install the suggested plugins). After the installation of plugins is complete, you will be prompted to create admin user. You can either create your own, or continue with the default admin. You will see an 'Instance Configuration' page that will ask you to confirm the preferred URL for your Jenkins instance. After confirming the appropriate information, click Save and Finish. You will see a confirmation page confirming that \u201cJenkins is Ready!\u201d Note: If you had moved forward with the default admin and not created a custom admin user, when logging in, username=\"admin\" and password=\" initialAdminPassword file>\". You can change the admin password from Dashboard \u2192 Admin \u2192 Configure","title":"Step 5 - Setting Up Jenkins"},{"location":"production_setup/","text":"Objective The aim of this section is to set up a production server for deploying an application (DVNA). About DVNA Damn Vulnerable NodeJS Application is a simple NodeJS application to demonstrate OWASP Top 10 Vulnerabilities and guide on fixing and avoiding these vulnerabilities. Prerequisites VM running Ubuntu 18.04 LTS. Docker installed Step 1 - Install docker Update the apt package index and install packages to allow apt to use a repository over HTTPS sudo apt-get update sudo apt-get install apt-transport-https ca-certificates curl gnupg lsb-release Add Docker\u2019s official GPG key curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings docker-archive-keyring.gpg Use the following command to set up the stable repository. echo \\ \"deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \\ $(lsb_release -cs) stable\" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null Update the apt package index, and install the latest version of Docker Engine and containerd. sudo apt-get update sudo apt-get install docker-ce docker-ce-cli containerd.io sudo docker run hello-world # Test if docker installation is successful Step 2 - Setup Production Server DVNA interacts with a MySQL database. Store the db configuration in a file named 'vars.env'. MYSQL_USER=dvna MYSQL_DATABASE=dvna MYSQL_PASSWORD=passw0rd MYSQL_RANDOM_ROOT_PASSWORD=yes MYSQL_HOST=mysql-db MYSQL_PORT=3306 Start MySQL container (using environment variables in vars.env file). Run an infinite command in detached mode (using -d ), so the command never ends and the container never stops. I used tail -f /dev/null because it is quite light weight and /dev/null is present in most linux images. sudo docker run -d --name dvna-mysql --env-file vars.env mysql:5.7 tail -f /dev/null Start/run the DVNA application. sudo docker run --name dvna-app --env-file vars.env --link dvna-mysql:mysql-db -p 9090:9090 -d appsecco/dvna To see the if the containers are running, run a docker ps . We will see two containers running; dvna-app and dvna-mysql. You can stop the running containers by using docker stop <container-name-or-id> . Note: You can start the containers again using docker start <container-name-or-id> . When starting, however, you will have to start dvna-mysql container first because the dvna-app is dependant on it. The docker commands can only be run as sudo user. There are 2 ways to enable executing docker commands without sudo. Although, you must know, its highly discouraged to do so. (i) Add 'user' to group 'docker' by typing the following command. The changes might not take effect without rebooting your VM. ```bash sudo usermod -aG docker $USER sudo reboot ``` (ii) This method should only be used if no other method seems to work, since it grants permission to every user to execute and run docker containers. bash sudo chmod 666 /var/run/docker.sock","title":"Setup of Production Server"},{"location":"production_setup/#objective","text":"The aim of this section is to set up a production server for deploying an application (DVNA). About DVNA Damn Vulnerable NodeJS Application is a simple NodeJS application to demonstrate OWASP Top 10 Vulnerabilities and guide on fixing and avoiding these vulnerabilities. Prerequisites VM running Ubuntu 18.04 LTS. Docker installed","title":"Objective"},{"location":"production_setup/#step-1-install-docker","text":"Update the apt package index and install packages to allow apt to use a repository over HTTPS sudo apt-get update sudo apt-get install apt-transport-https ca-certificates curl gnupg lsb-release Add Docker\u2019s official GPG key curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings docker-archive-keyring.gpg Use the following command to set up the stable repository. echo \\ \"deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \\ $(lsb_release -cs) stable\" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null Update the apt package index, and install the latest version of Docker Engine and containerd. sudo apt-get update sudo apt-get install docker-ce docker-ce-cli containerd.io sudo docker run hello-world # Test if docker installation is successful","title":"Step 1 - Install docker"},{"location":"production_setup/#step-2-setup-production-server","text":"DVNA interacts with a MySQL database. Store the db configuration in a file named 'vars.env'. MYSQL_USER=dvna MYSQL_DATABASE=dvna MYSQL_PASSWORD=passw0rd MYSQL_RANDOM_ROOT_PASSWORD=yes MYSQL_HOST=mysql-db MYSQL_PORT=3306 Start MySQL container (using environment variables in vars.env file). Run an infinite command in detached mode (using -d ), so the command never ends and the container never stops. I used tail -f /dev/null because it is quite light weight and /dev/null is present in most linux images. sudo docker run -d --name dvna-mysql --env-file vars.env mysql:5.7 tail -f /dev/null Start/run the DVNA application. sudo docker run --name dvna-app --env-file vars.env --link dvna-mysql:mysql-db -p 9090:9090 -d appsecco/dvna To see the if the containers are running, run a docker ps . We will see two containers running; dvna-app and dvna-mysql. You can stop the running containers by using docker stop <container-name-or-id> . Note: You can start the containers again using docker start <container-name-or-id> . When starting, however, you will have to start dvna-mysql container first because the dvna-app is dependant on it. The docker commands can only be run as sudo user. There are 2 ways to enable executing docker commands without sudo. Although, you must know, its highly discouraged to do so. (i) Add 'user' to group 'docker' by typing the following command. The changes might not take effect without rebooting your VM. ```bash sudo usermod -aG docker $USER sudo reboot ``` (ii) This method should only be used if no other method seems to work, since it grants permission to every user to execute and run docker containers. bash sudo chmod 666 /var/run/docker.sock","title":"Step 2 - Setup Production Server"},{"location":"resources/","text":"These are some references I used along with the ones mentioned implicitly in the report: Setup of VMs Ubuntu ( https://www.digitalocean.com/community/tutorials/initial-server-setup-with-ubuntu-18-04 ) OpenJDK ( https://www.digitalocean.com/community/tutorials/how-to-install-java-with-apt-on-ubuntu-18-04#installing-specific-versions-of-openjdk ) VM Network ( https://christophermaier.name/2010/09/01/host-only-networking-with-virtualbox/ ) Netplan ( https://www.linux.com/topic/distributions/how-use-netplan-network-configuration-tool-linux/ ) Setup of Jenkins Server Jenkins Installation ( https://www.digitalocean.com/community/tutorials/how-to-install-jenkins-on-ubuntu-18-04 ) Setup of Production Server DVNA ( https://github.com/appsecco/dvna ) Docker Installation ( https://docs.docker.com/engine/install/ubuntu/ ) Static Analysis NodeJsScan ( https://github.com/ajinabraham/nodejsscan ) Auditjs ( https://github.com/sonatype-nexus-community/auditjs ) OWASP Dependancy Check ( https://owasp.org/www-project-dependency-check/ ) Dynamic Analysis ZAP docker ( https://www.zaproxy.org/docs/docker/about/ ) ZAP docker full-scan ( https://www.zaproxy.org/docs/docker/full-scan/ ) ZAP docker baseline-scan ( https://www.zaproxy.org/docs/docker/baseline-scan/ ) ZAP CLI ( https://github.com/Grunny/zap-cli ) Increase VM Disk Space ( https://ourcodeworld.com/articles/read/1434/how-to-increase-the-disk-size-of-a-dynamically-allocated-disk-in-virtualbox )","title":"Resources"},{"location":"resources/#setup-of-vms","text":"Ubuntu ( https://www.digitalocean.com/community/tutorials/initial-server-setup-with-ubuntu-18-04 ) OpenJDK ( https://www.digitalocean.com/community/tutorials/how-to-install-java-with-apt-on-ubuntu-18-04#installing-specific-versions-of-openjdk ) VM Network ( https://christophermaier.name/2010/09/01/host-only-networking-with-virtualbox/ ) Netplan ( https://www.linux.com/topic/distributions/how-use-netplan-network-configuration-tool-linux/ )","title":"Setup of VMs"},{"location":"resources/#setup-of-jenkins-server","text":"Jenkins Installation ( https://www.digitalocean.com/community/tutorials/how-to-install-jenkins-on-ubuntu-18-04 )","title":"Setup of Jenkins Server"},{"location":"resources/#setup-of-production-server","text":"DVNA ( https://github.com/appsecco/dvna ) Docker Installation ( https://docs.docker.com/engine/install/ubuntu/ )","title":"Setup of Production Server"},{"location":"resources/#static-analysis","text":"NodeJsScan ( https://github.com/ajinabraham/nodejsscan ) Auditjs ( https://github.com/sonatype-nexus-community/auditjs ) OWASP Dependancy Check ( https://owasp.org/www-project-dependency-check/ )","title":"Static Analysis"},{"location":"resources/#dynamic-analysis","text":"ZAP docker ( https://www.zaproxy.org/docs/docker/about/ ) ZAP docker full-scan ( https://www.zaproxy.org/docs/docker/full-scan/ ) ZAP docker baseline-scan ( https://www.zaproxy.org/docs/docker/baseline-scan/ ) ZAP CLI ( https://github.com/Grunny/zap-cli ) Increase VM Disk Space ( https://ourcodeworld.com/articles/read/1434/how-to-increase-the-disk-size-of-a-dynamically-allocated-disk-in-virtualbox )","title":"Dynamic Analysis"},{"location":"sbom/","text":"Objective The aim of this section is to generate a Software Bill of Materials (SBoM) for DVNA and generate a report. About SBOM A Software Bill of Materials (SBOM) is a list of all the open source and third-party components present in a codebase. It lists the licenses that govern those components, the versions of the components used in the codebase, and their patch status. CycloneDX The CycloneDX module for Node.js creates a valid CycloneDX SBoM containing an aggregate of all project dependencies. It's a lightweight SBoM specification that is easily created, human and machine readable, and simple to parse. Installation of cyclonedx using npm. npm install -g @cyclonedx/bom To generate a SBoM report, use the -o flag and specify the filename and its format. The report can be either XML or JSON. cyclonedx-bom -o bom.json","title":"Software Bill of Materials"},{"location":"sbom/#objective","text":"The aim of this section is to generate a Software Bill of Materials (SBoM) for DVNA and generate a report. About SBOM A Software Bill of Materials (SBOM) is a list of all the open source and third-party components present in a codebase. It lists the licenses that govern those components, the versions of the components used in the codebase, and their patch status.","title":"Objective"},{"location":"sbom/#cyclonedx","text":"The CycloneDX module for Node.js creates a valid CycloneDX SBoM containing an aggregate of all project dependencies. It's a lightweight SBoM specification that is easily created, human and machine readable, and simple to parse. Installation of cyclonedx using npm. npm install -g @cyclonedx/bom To generate a SBoM report, use the -o flag and specify the filename and its format. The report can be either XML or JSON. cyclonedx-bom -o bom.json","title":"CycloneDX"},{"location":"ssh_connection/","text":"Objective The aim of this section is to enable SSH communication between the two VMs. About SSH SSH provides a secure encrypted channel between two hosts over an insecure network. This connection can also be used for terminal access, file transfers, and for tunneling other applications. It uses public/private key pair. The public key can be given to everyone. The private key is kept secret and used to authenticate the user trying to establish a connection. Prerequisites VMs running Ubuntu 18.04 LTS. Generating SSH Keys Generate SSH keys in the Jenkins VM using ssh-keygen . The encryption algorithm I used is ed25519, which is generally much faster than RSA and provides the same level of security with significantly smaller keys. Consequently, two files are generated; id_ed25519 and id_ed25519.pub. The former contains the private key, while the public key is present in the latter. ssh-keygen -t ed25519 -m PEM You will be prompted to add a passphrase. You can either provide one or leave it empty. Copying SSH Key Copy the public key from Jenkins server (id_ed25519.pub) into '.ssh/authorized_users' file of Production servers. ssh-copy-id -i ~/.ssh/id_ed25519 <username>@<production_server_ip> Copy the .ssh folder in Jenkins server into /var/lib/jenkins of the same server and change the ownership of the folder from root to jenkins. This is because jenkins user executes commands. Also, change the permissions of the /var/lib/jenkins/.ssh to only-read mode for owner (ie. user 'jenkins') sudo cp -r ~/.ssh /var/lib/jenkins sudo chown -R jenkins:jenkins /var/lib/jenkins/.ssh sudo chmod 400 /var/lib/jenkins/.ssh Test SSH Connection Use ssh command to successfully login to the other server without being prompted for a password. Test SSH connection as user jenkins . sudo su - jenkins ssh <username>@<ip_address_of_server> Jenkins remote SSH Install Publish over SSH plugin. Go to Dashboard \u2192 Manage Jenkins \u2192 Configure System \u2192 Publish over SSH . Add the path to the private SSH key of Jenkins server or copy the private SSH key into the input field. Add SSH server details. Give the Production servers hostname (IP address), username for logging in and remote directory (/home/tariq). You should now be able to run remote SSH commands via Jenkins pipeline.","title":"SSH Connection between VMs"},{"location":"ssh_connection/#objective","text":"The aim of this section is to enable SSH communication between the two VMs. About SSH SSH provides a secure encrypted channel between two hosts over an insecure network. This connection can also be used for terminal access, file transfers, and for tunneling other applications. It uses public/private key pair. The public key can be given to everyone. The private key is kept secret and used to authenticate the user trying to establish a connection. Prerequisites VMs running Ubuntu 18.04 LTS.","title":"Objective"},{"location":"ssh_connection/#generating-ssh-keys","text":"Generate SSH keys in the Jenkins VM using ssh-keygen . The encryption algorithm I used is ed25519, which is generally much faster than RSA and provides the same level of security with significantly smaller keys. Consequently, two files are generated; id_ed25519 and id_ed25519.pub. The former contains the private key, while the public key is present in the latter. ssh-keygen -t ed25519 -m PEM You will be prompted to add a passphrase. You can either provide one or leave it empty.","title":"Generating SSH Keys"},{"location":"ssh_connection/#copying-ssh-key","text":"Copy the public key from Jenkins server (id_ed25519.pub) into '.ssh/authorized_users' file of Production servers. ssh-copy-id -i ~/.ssh/id_ed25519 <username>@<production_server_ip> Copy the .ssh folder in Jenkins server into /var/lib/jenkins of the same server and change the ownership of the folder from root to jenkins. This is because jenkins user executes commands. Also, change the permissions of the /var/lib/jenkins/.ssh to only-read mode for owner (ie. user 'jenkins') sudo cp -r ~/.ssh /var/lib/jenkins sudo chown -R jenkins:jenkins /var/lib/jenkins/.ssh sudo chmod 400 /var/lib/jenkins/.ssh","title":"Copying SSH Key"},{"location":"ssh_connection/#test-ssh-connection","text":"Use ssh command to successfully login to the other server without being prompted for a password. Test SSH connection as user jenkins . sudo su - jenkins ssh <username>@<ip_address_of_server>","title":"Test SSH Connection"},{"location":"ssh_connection/#jenkins-remote-ssh","text":"Install Publish over SSH plugin. Go to Dashboard \u2192 Manage Jenkins \u2192 Configure System \u2192 Publish over SSH . Add the path to the private SSH key of Jenkins server or copy the private SSH key into the input field. Add SSH server details. Give the Production servers hostname (IP address), username for logging in and remote directory (/home/tariq). You should now be able to run remote SSH commands via Jenkins pipeline.","title":"Jenkins remote SSH"},{"location":"static_analysis/","text":"Objective The aim of this section is to perform static analysis on DVNA, using SAST and SCA tools, in a Jenkins pipeline. About SAST Static application security testing (SAST) is a testing methodology that analyzes source code to find security vulnerabilities. SAST scans an application before the code is compiled. Its also known as white box testing. About SCA Software composition analysis (SCA) identifies all the open source in a codebase and maps that inventory to a list of current known vulnerabilities. It helps identify vulnerabilities in open source code (dependencies) used in code. Prerequisites An application (DVNA) running on Production Server. NodeJsScan NodeJsScan is a static code scanner which is used to find security flaws in Node.js applications. Web-based Pull NodeJsScan docker image sudo docker pull opensecurity/nodejsscan:latest Run nodjsscan container sudo docker run -it -p 9090:9090 opensecurity/nodejsscan:latest -d You can access the website by typing <ip-address>:9090 in the browsers URL. To perform SAST, upload the files (as a zip file) or individual file and run the scan. CLI-based In the Production server, enter DVNA container in exec mode. sudo docker exec -it -u 0 dvna-app /bin/bash To install njsscan, we first need to install pip3 in 'dvna-app' container in production server. apt update && apt install python3-pip Install njsscan pip3 install njsscan Scan the ~/app directory (which holds the files for DVNA) and store the scan result in ~/report/nodejsscan-report mkdir ~/report njsscan --json -o /app/report/nodejsscan-report ~/app Auditjs Auditjs is a SAST tool which detects vulnerablilites in dependencies (node modules) used in your application. It interacts with Sonatype Nexus IQ Server to check for known and disclosed vulnerabailites. In the Production server, enter DVNA container in exec mode. sudo docker exec -it -u 0 dvna-app /bin/bash To install auditjs, we first need to install npm and nodejs in 'dvna-app' container in production server. After running the following commands, the package versions are: npm v6.14.14 and nodejs v14.17.4 sudo apt update sudo curl -sL https://deb.nodesource.com/setup_14.x | sudo -E bash - sudo apt install -y nodejs npm sudo npm install latest-version Install auditjs using npm sudo npm install -g auditjs Scan the ~/app directory (which holds the files for DVNA) and store the scan result in ~/report/auditjs-report . cd ~/app auditjs ossi > ~/report/auditjs-report If your NodeJs project is very large, you might face rate-limit issues. To solve this issue, create a free account at OSS Index and run the scan with your accounts 'Username' and 'API-token'. Note : You can find the API-token in the User settings after logging into the OSS Index website. auditjs ossi --username <USERNAME> --token <API-TOKEN> > ~/report/auditjs-report OWASP Dependancy-Check OWASP Dependency-Check is a software composition analysis (SCA) tool that detects publicly disclosed vulnerabilities contained within a project\u2019s dependencies. To start working with Dependency Check, I followed the official documentation . First, download the Dependency-Check CLI tool and the associated GPG signature file. wget -P ~/ https://github.com/jeremylong/DependencyCheck/releases/download/v6.2.2/dependency-check-6.2.2-release.zip wget -P ~/ https://github.com/jeremylong/DependencyCheck/releases/download/v6.2.2/dependency-check-6.2.2-release.zip.asc Next, extract the files from the dependency-check tool zip file. unzip ~/dependency-check-6.2.2-release.zip Perform the scan by specifying the path to the project, output report format and its location. ~/dependency-check/bin/dependency-check.sh --scan ~/app --out ~/report/dependency-check-report --format JSON --prettyPrint This scan is inclusive of Retire.js scan, NPM Audit scan, and Auditjs scan, to name a few. SAST Pipeline The static analysis is done by copying the DVNA code in Production server to Jenkins server, and then running multiple static analysis scans. The Jenkinsfile for performing SAST and SCA of DVNA via Jenkins pipeline is given below: pipeline { agent any stages { stage ('Initialization') { steps { sh 'echo \"Starting the build!\"' } } stage('Copy Application Code') { steps { sh 'ssh -o StrictHostKeyChecking=no tariq@192.168.56.102 \"docker start dvna-mysql && docker start dvna-app; docker cp dvna-app:/app/ ~/; docker stop dvna-app && docker stop dvna-mysql;\"' sh 'scp -rC tariq@192.168.56.102:~/app ~/ && mkdir -p ~/report' } } stage('NodeJsScan') { steps { sh 'njsscan --json -o ~/report/nodejsscan-report ~/app || true' } } stage('Auditjs') { steps { sh 'cd ~/app; auditjs ossi > ~/report/auditjs-report || true' } } stage ('OWASP Dependency-Check') { steps { sh '~/dependency-check/bin/dependency-check.sh --scan ~/app --out ~/report/dependency-check-report --format JSON --prettyPrint || true' } } stage ('Final') { steps { sh 'rm -rf ~/app' sh 'echo \"Scan successfully completed!\"' } } } }","title":"Static Analysis"},{"location":"static_analysis/#objective","text":"The aim of this section is to perform static analysis on DVNA, using SAST and SCA tools, in a Jenkins pipeline. About SAST Static application security testing (SAST) is a testing methodology that analyzes source code to find security vulnerabilities. SAST scans an application before the code is compiled. Its also known as white box testing. About SCA Software composition analysis (SCA) identifies all the open source in a codebase and maps that inventory to a list of current known vulnerabilities. It helps identify vulnerabilities in open source code (dependencies) used in code. Prerequisites An application (DVNA) running on Production Server.","title":"Objective"},{"location":"static_analysis/#nodejsscan","text":"NodeJsScan is a static code scanner which is used to find security flaws in Node.js applications.","title":"NodeJsScan"},{"location":"static_analysis/#web-based","text":"Pull NodeJsScan docker image sudo docker pull opensecurity/nodejsscan:latest Run nodjsscan container sudo docker run -it -p 9090:9090 opensecurity/nodejsscan:latest -d You can access the website by typing <ip-address>:9090 in the browsers URL. To perform SAST, upload the files (as a zip file) or individual file and run the scan.","title":"Web-based"},{"location":"static_analysis/#cli-based","text":"In the Production server, enter DVNA container in exec mode. sudo docker exec -it -u 0 dvna-app /bin/bash To install njsscan, we first need to install pip3 in 'dvna-app' container in production server. apt update && apt install python3-pip Install njsscan pip3 install njsscan Scan the ~/app directory (which holds the files for DVNA) and store the scan result in ~/report/nodejsscan-report mkdir ~/report njsscan --json -o /app/report/nodejsscan-report ~/app","title":"CLI-based"},{"location":"static_analysis/#auditjs","text":"Auditjs is a SAST tool which detects vulnerablilites in dependencies (node modules) used in your application. It interacts with Sonatype Nexus IQ Server to check for known and disclosed vulnerabailites. In the Production server, enter DVNA container in exec mode. sudo docker exec -it -u 0 dvna-app /bin/bash To install auditjs, we first need to install npm and nodejs in 'dvna-app' container in production server. After running the following commands, the package versions are: npm v6.14.14 and nodejs v14.17.4 sudo apt update sudo curl -sL https://deb.nodesource.com/setup_14.x | sudo -E bash - sudo apt install -y nodejs npm sudo npm install latest-version Install auditjs using npm sudo npm install -g auditjs Scan the ~/app directory (which holds the files for DVNA) and store the scan result in ~/report/auditjs-report . cd ~/app auditjs ossi > ~/report/auditjs-report If your NodeJs project is very large, you might face rate-limit issues. To solve this issue, create a free account at OSS Index and run the scan with your accounts 'Username' and 'API-token'. Note : You can find the API-token in the User settings after logging into the OSS Index website. auditjs ossi --username <USERNAME> --token <API-TOKEN> > ~/report/auditjs-report","title":"Auditjs"},{"location":"static_analysis/#owasp-dependancy-check","text":"OWASP Dependency-Check is a software composition analysis (SCA) tool that detects publicly disclosed vulnerabilities contained within a project\u2019s dependencies. To start working with Dependency Check, I followed the official documentation . First, download the Dependency-Check CLI tool and the associated GPG signature file. wget -P ~/ https://github.com/jeremylong/DependencyCheck/releases/download/v6.2.2/dependency-check-6.2.2-release.zip wget -P ~/ https://github.com/jeremylong/DependencyCheck/releases/download/v6.2.2/dependency-check-6.2.2-release.zip.asc Next, extract the files from the dependency-check tool zip file. unzip ~/dependency-check-6.2.2-release.zip Perform the scan by specifying the path to the project, output report format and its location. ~/dependency-check/bin/dependency-check.sh --scan ~/app --out ~/report/dependency-check-report --format JSON --prettyPrint This scan is inclusive of Retire.js scan, NPM Audit scan, and Auditjs scan, to name a few.","title":"OWASP Dependancy-Check"},{"location":"static_analysis/#sast-pipeline","text":"The static analysis is done by copying the DVNA code in Production server to Jenkins server, and then running multiple static analysis scans. The Jenkinsfile for performing SAST and SCA of DVNA via Jenkins pipeline is given below: pipeline { agent any stages { stage ('Initialization') { steps { sh 'echo \"Starting the build!\"' } } stage('Copy Application Code') { steps { sh 'ssh -o StrictHostKeyChecking=no tariq@192.168.56.102 \"docker start dvna-mysql && docker start dvna-app; docker cp dvna-app:/app/ ~/; docker stop dvna-app && docker stop dvna-mysql;\"' sh 'scp -rC tariq@192.168.56.102:~/app ~/ && mkdir -p ~/report' } } stage('NodeJsScan') { steps { sh 'njsscan --json -o ~/report/nodejsscan-report ~/app || true' } } stage('Auditjs') { steps { sh 'cd ~/app; auditjs ossi > ~/report/auditjs-report || true' } } stage ('OWASP Dependency-Check') { steps { sh '~/dependency-check/bin/dependency-check.sh --scan ~/app --out ~/report/dependency-check-report --format JSON --prettyPrint || true' } } stage ('Final') { steps { sh 'rm -rf ~/app' sh 'echo \"Scan successfully completed!\"' } } } }","title":"SAST Pipeline"},{"location":"vm_setup/","text":"Objective The aim of this section is to set up VMs running Ubuntu Server. Setting up VMs For the lab setup, I created 2 VMs running Ubuntu 18.04 LTS on VirtualBox. One VM is for Jenkins deployment and the other is a production server for deploying DVNA via Jenkins pipeline. I followed this documentation upto \"Up and Running with SSH\" step, for installing Ubuntu on both the VMs. In the blog, they used a \"Bridged\" connection for enabling VM-to-VM and host-to-VM communication. But this was not working for me. So I instead used 2 adaptors; one for NAT and the other a Host-only network. VM Network Configuration Open Virtual Box and go to File -> Host Network Manager . The Host Network Manager window will open, and ideally, a network named \"vboxnet0\" should exist with the DHCP server disabled. If it does not exist, you can create it by clicking on the \"Create\" button. The new network created will be named \"vboxnet0\" and ensure DHCP server is not enabled. This network will enable host-to-VM communication. Now, open the Oracle VM VirtualBox Manager , click on the VM that you wish to configure for networking and go to the Network group. Follow this configuration steps for both the VMs (Jenkins and Production VMs, in my case) Adaptor 1 -> Click on \"Enable Network Adapter\" and in the Attached field, select NAT. Adaptor 2 -> Click on \"Enable Network Adapter\" and make sure the fields are configured like this: Attached to - Host-only Adapter, Name - vboxnet0. We need each of the guest VMs to have a static IP address on the host-only network. Log in to your Ubuntu guest and type the following command. ifconfig <interface> 192.168.56.101 netmask 255.255.255.0 up Now you should be able to SSH into your VM from your host using this IP address. This is just temporary, however; once you reboot, this configuration will disappear. To make it permanent, add this to the .yml file in /etc/netplan directory (as root ): # This is the network config written by 'subiquity' network: ethernets: enp0s3: dhcp4: true enp0s8: addresses: [192.168.56.101/24] nameservers: addresses: [1.1.1.1,8.8.8.8] version: 2 Before we apply the change, let\u2019s test the configuration. To do that, issue the command: sudo netplan try The above command will validate the configuration before applying it. If it succeeds, you will see Configuration accepted and Netplan will attempt to apply the new settings to a running system. Should the new configuration file fail, Netplan will automatically revert to the previous working configuration. If you are certain of your configuration file, you can skip the try option and go directly to applying the new options. The command for this is: sudo netplan apply Your setup should now be complete! Note: Fix for updating apt package repository After installing Ubuntu 18.04 LTS iso file and running two VMs using it, I tried to update all packages and their dependancies using sudo apt install update . This, however, was not working and threw errors. As my location was Kuwait, it tried reaching out to https://kw.archive.ubuntu.com/ ..._ to find updates. But this archive server was not reachable. To solve this issue, I changed all occurences of https://kw.archive.ubuntu.com/ ... to https://archive.ubuntu.com/ ... in the sources.list file sudo nano /etc/apt/sources.list Your server should now be able to interact with the ubuntu archive server for updates and other packages.","title":"Setup of VMs"},{"location":"vm_setup/#objective","text":"The aim of this section is to set up VMs running Ubuntu Server.","title":"Objective"},{"location":"vm_setup/#setting-up-vms","text":"For the lab setup, I created 2 VMs running Ubuntu 18.04 LTS on VirtualBox. One VM is for Jenkins deployment and the other is a production server for deploying DVNA via Jenkins pipeline. I followed this documentation upto \"Up and Running with SSH\" step, for installing Ubuntu on both the VMs. In the blog, they used a \"Bridged\" connection for enabling VM-to-VM and host-to-VM communication. But this was not working for me. So I instead used 2 adaptors; one for NAT and the other a Host-only network.","title":"Setting up VMs"},{"location":"vm_setup/#vm-network-configuration","text":"Open Virtual Box and go to File -> Host Network Manager . The Host Network Manager window will open, and ideally, a network named \"vboxnet0\" should exist with the DHCP server disabled. If it does not exist, you can create it by clicking on the \"Create\" button. The new network created will be named \"vboxnet0\" and ensure DHCP server is not enabled. This network will enable host-to-VM communication. Now, open the Oracle VM VirtualBox Manager , click on the VM that you wish to configure for networking and go to the Network group. Follow this configuration steps for both the VMs (Jenkins and Production VMs, in my case) Adaptor 1 -> Click on \"Enable Network Adapter\" and in the Attached field, select NAT. Adaptor 2 -> Click on \"Enable Network Adapter\" and make sure the fields are configured like this: Attached to - Host-only Adapter, Name - vboxnet0. We need each of the guest VMs to have a static IP address on the host-only network. Log in to your Ubuntu guest and type the following command. ifconfig <interface> 192.168.56.101 netmask 255.255.255.0 up Now you should be able to SSH into your VM from your host using this IP address. This is just temporary, however; once you reboot, this configuration will disappear. To make it permanent, add this to the .yml file in /etc/netplan directory (as root ): # This is the network config written by 'subiquity' network: ethernets: enp0s3: dhcp4: true enp0s8: addresses: [192.168.56.101/24] nameservers: addresses: [1.1.1.1,8.8.8.8] version: 2 Before we apply the change, let\u2019s test the configuration. To do that, issue the command: sudo netplan try The above command will validate the configuration before applying it. If it succeeds, you will see Configuration accepted and Netplan will attempt to apply the new settings to a running system. Should the new configuration file fail, Netplan will automatically revert to the previous working configuration. If you are certain of your configuration file, you can skip the try option and go directly to applying the new options. The command for this is: sudo netplan apply Your setup should now be complete! Note: Fix for updating apt package repository After installing Ubuntu 18.04 LTS iso file and running two VMs using it, I tried to update all packages and their dependancies using sudo apt install update . This, however, was not working and threw errors. As my location was Kuwait, it tried reaching out to https://kw.archive.ubuntu.com/ ..._ to find updates. But this archive server was not reachable. To solve this issue, I changed all occurences of https://kw.archive.ubuntu.com/ ... to https://archive.ubuntu.com/ ... in the sources.list file sudo nano /etc/apt/sources.list Your server should now be able to interact with the ubuntu archive server for updates and other packages.","title":"VM Network Configuration"}]}